# --------------------------------------------
# Build, Test, Analyze, Dockerize & Deploy
# --------------------------------------------

name: Build, Analyze, Dockerize & Deploy

# Triggers:
# - On push to main branch
# - On manual run from GitHub UI
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # --------------------------------------------
  # Job 1: SonarCloud Static Code Analysis
  # --------------------------------------------
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out project
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Cache SonarCloud packages
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Step 4: Run Tests and generate coverage report (required by SonarCloud)
      - name: Run tests with coverage
        run: mvn clean verify

      # Step 5: Run SonarCloud analysis
      - name: SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # GitHub secret

  # --------------------------------------------
  # Job 2: Build, Dockerize, and Deploy to Render
  # --------------------------------------------
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: sonarcloud

    steps:
      # Step 1: Check out code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 3: Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 4: Build Spring Boot app (skipping tests here as already run)
      - name: Build application
        run: mvn clean package -DskipTests

      # Step 5: Create a tag with today's date (used for versioned Docker tags)
      - name: Set Docker image tag
        id: vars
        run: echo "IMAGE_TAG=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # Step 6: Authenticate with Docker Hub using GitHub secrets
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 7: Build Docker image (tagged with today's date and "latest")
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-todo-app:${{ env.IMAGE_TAG }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/spring-todo-app:${{ env.IMAGE_TAG }} ${{ secrets.DOCKER_USERNAME }}/spring-todo-app:latest

      # Step 8: Push both tags to Docker Hub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-todo-app:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-todo-app:latest

      # Step 9: Trigger redeploy on Render using deploy hook
      - name: Trigger Render Deploy Hook
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
